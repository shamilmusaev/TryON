// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è HEVC –≤ JPEG
import heicPolyfill from './heicPolyfill';
import imagePreprocessor from './imagePreprocessor';

class ImageConverterService {
  constructor() {
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª HEVC/HEIF —Ñ–æ—Ä–º–∞—Ç–æ–º
  isHEVCFormat(file) {
    return heicPolyfill.canProcess(file);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å iPhone
  isiPhoneImage(file) {
    return imagePreprocessor.needsAdvancedProcessing(file);
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEVC –≤ JPEG —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
  async convertHEVCToJPEG(file, quality = 0.95) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø–æ–ª–∏—Ñ–∏–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HEIC
      const convertedFile = await heicPolyfill.convertHEIC(file);
      
      // –ï—Å–ª–∏ –ø–æ–ª–∏—Ñ–∏–ª –≤–µ—Ä–Ω—É–ª —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª (–Ω–µ —Å–º–æ–≥ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å),
      // –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ canvas
      if (convertedFile === file) {
        return await this.fallbackConversion(file, quality);
      }
      
      return convertedFile;
      
    } catch (error) {
      console.warn('HEIC polyfill failed, trying fallback:', error.message);
      return await this.fallbackConversion(file, quality);
    }
  }

  // Fallback –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π Image + Canvas
  async fallbackConversion(file, quality = 0.95) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      
      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          this.canvas.width = img.naturalWidth;
          this.canvas.height = img.naturalHeight;
          
          // –û—á–∏—â–∞–µ–º canvas
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          
          // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ canvas —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
          this.ctx.imageSmoothingEnabled = true;
          this.ctx.imageSmoothingQuality = 'high';
          this.ctx.drawImage(img, 0, 0);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º JPEG
          this.canvas.toBlob((blob) => {
            if (blob) {
              // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π File –æ–±—ä–µ–∫—Ç
              const convertedFile = new File(
                [blob], 
                file.name.replace(/\.(heic|heif)$/i, '.jpg'),
                { type: 'image/jpeg' }
              );
              
              console.log(`‚úÖ HEVC –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${file.name} (${(file.size/1024/1024).toFixed(2)}MB) ‚Üí ${convertedFile.name} (${(convertedFile.size/1024/1024).toFixed(2)}MB)`);
              resolve(convertedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å HEVC –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            }
          }, 'image/jpeg', quality);
          
        } catch (error) {
          reject(error);
        } finally {
          // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HEVC –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'));
      };
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º crossOrigin –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CORS –ø—Ä–æ–±–ª–µ–º
      img.crossOrigin = 'anonymous';
      img.src = url;
    });
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª—é–±–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞)
  async optimizeImage(file, maxWidth = 2048, maxHeight = 2048, quality = 0.9) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          let { width, height } = img;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
          if (width > maxWidth || height > maxHeight) {
            const ratio = Math.min(maxWidth / width, maxHeight / height);
            width = Math.round(width * ratio);
            height = Math.round(height * ratio);
          }
          
          this.canvas.width = width;
          this.canvas.height = height;
          
          this.ctx.clearRect(0, 0, width, height);
          this.ctx.imageSmoothingEnabled = true;
          this.ctx.imageSmoothingQuality = 'high';
          this.ctx.drawImage(img, 0, 0, width, height);
          
          this.canvas.toBlob((blob) => {
            if (blob) {
              const optimizedFile = new File(
                [blob], 
                file.name,
                { type: file.type }
              );
              
              console.log(`üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${(file.size/1024/1024).toFixed(2)}MB ‚Üí ${(optimizedFile.size/1024/1024).toFixed(2)}MB`);
              resolve(optimizedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            }
          }, file.type, quality);
          
        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'));
      };
      
      img.crossOrigin = 'anonymous';
      img.src = url;
    });
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
  async processImage(file) {
    console.log(`üñºÔ∏è –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${(file.size / 1024).toFixed(2)} KB`);
    try {
      let processedFile = file;
      
      // –ï—Å–ª–∏ —ç—Ç–æ HEVC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
      if (this.isHEVCFormat(file)) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω HEVC —Ñ–æ—Ä–º–∞—Ç, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ JPEG...');
        processedFile = await this.convertHEVCToJPEG(file, 0.95);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å iPhone, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      if (this.isiPhoneImage(file)) {
        console.log('üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ iPhone, –ø—Ä–∏–º–µ–Ω—è—é –±–∞–∑–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');
        processedFile = await imagePreprocessor.preprocessForAI(processedFile, {
          normalizeColors: false,  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
          enhanceQuality: false,   // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
          optimizeSize: true,      // –¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è AI
          stripMeta: true,         // –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
          targetWidth: 768,
          targetHeight: 1024
        });
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        const maxSizeForOptimization = 8 * 1024 * 1024; // 8MB
        if (processedFile.size > maxSizeForOptimization) {
          console.log('üìâ –§–∞–π–ª –±–æ–ª—å—à–æ–π, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é...');
          processedFile = await this.optimizeImage(processedFile, 2048, 2048, 0.9);
        }
      }
      
      return processedFile;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  async getImageInfo(file) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        const info = {
          width: img.naturalWidth,
          height: img.naturalHeight,
          aspectRatio: img.naturalWidth / img.naturalHeight,
          isPortrait: img.naturalHeight > img.naturalWidth,
          isLandscape: img.naturalWidth > img.naturalHeight,
          isSquare: img.naturalWidth === img.naturalHeight,
          isiPhoneImage: this.isiPhoneImage(file),
          isHEVC: this.isHEVCFormat(file)
        };
        
        URL.revokeObjectURL(url);
        resolve(info);
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏'));
      };
      
      img.src = url;
    });
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ Base64
  fileToBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = (error) => reject(error);
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
const imageConverter = new ImageConverterService();
export default imageConverter; 