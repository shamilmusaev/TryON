// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class ImagePreprocessorService {
  constructor() {
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è AI –º–æ–¥–µ–ª–µ–π
  async normalizeColorSpace(file) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
          this.canvas.width = img.naturalWidth;
          this.canvas.height = img.naturalHeight;
          
          // –û—á–∏—â–∞–µ–º canvas
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          
          // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ sRGB
          this.ctx.drawImage(img, 0, 0);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
          const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
          const data = imageData.data;
          
          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–≤–µ—Ç–∞ (—É–±–∏—Ä–∞–µ–º P3 —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ iPhone)
          for (let i = 0; i < data.length; i += 4) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è sRGB
            data[i] = this.gammaCorrection(data[i]);     // Red
            data[i + 1] = this.gammaCorrection(data[i + 1]); // Green
            data[i + 2] = this.gammaCorrection(data[i + 2]); // Blue
            // Alpha –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          }
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ
          this.ctx.putImageData(imageData, 0, 0);
          
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
          this.canvas.toBlob((blob) => {
            if (blob) {
              const normalizedFile = new File(
                [blob],
                file.name.replace(/\.[^/.]+$/, '_normalized.jpg'),
                { type: 'image/jpeg' }
              );
              
              console.log('üé® –¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–ª—è AI');
              resolve(normalizedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞'));
            }
          }, 'image/jpeg', 0.95);
          
        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏'));
      };
      
      img.src = url;
    });
  }

  // –ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è sRGB
  gammaCorrection(value) {
    const normalized = value / 255;
    const corrected = normalized <= 0.04045 
      ? normalized / 12.92 
      : Math.pow((normalized + 0.055) / 1.055, 2.4);
    return Math.round(Math.pow(corrected, 1/2.2) * 255);
  }

  // –£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –∏ —è—Ä–∫–æ—Å—Ç–∏
  async enhanceImage(file) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          this.canvas.width = img.naturalWidth;
          this.canvas.height = img.naturalHeight;
          
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          this.ctx.drawImage(img, 0, 0);
          
          const imageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
          const data = imageData.data;
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
          const histogram = this.calculateHistogram(data);
          const { brightness, contrast } = this.calculateOptimalAdjustments(histogram);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
          for (let i = 0; i < data.length; i += 4) {
            // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
            data[i] = this.clamp((data[i] - 128) * contrast + 128 + brightness);
            data[i + 1] = this.clamp((data[i + 1] - 128) * contrast + 128 + brightness);
            data[i + 2] = this.clamp((data[i + 2] - 128) * contrast + 128 + brightness);
          }
          
          this.ctx.putImageData(imageData, 0, 0);
          
          this.canvas.toBlob((blob) => {
            if (blob) {
              const enhancedFile = new File(
                [blob],
                file.name.replace(/\.[^/.]+$/, '_enhanced.jpg'),
                { type: 'image/jpeg' }
              );
              
              console.log('‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ: —è—Ä–∫–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
              resolve(enhancedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            }
          }, 'image/jpeg', 0.95);
          
        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è'));
      };
      
      img.src = url;
    });
  }

  // –†–∞—Å—á–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
  calculateHistogram(data) {
    const histogram = new Array(256).fill(0);
    
    for (let i = 0; i < data.length; i += 4) {
      const luminance = Math.round(
        0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]
      );
      histogram[luminance]++;
    }
    
    return histogram;
  }

  // –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —è—Ä–∫–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
  calculateOptimalAdjustments(histogram) {
    const total = histogram.reduce((sum, count) => sum + count, 0);
    
    // –ù–∞—Ö–æ–¥–∏–º 5% –∏ 95% –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–∏
    let cumulative = 0;
    let min = 0, max = 255;
    
    for (let i = 0; i < 256; i++) {
      cumulative += histogram[i];
      if (cumulative >= total * 0.05 && min === 0) {
        min = i;
      }
      if (cumulative >= total * 0.95 && max === 255) {
        max = i;
        break;
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    const targetMin = 20;  // –¶–µ–ª–µ–≤–æ–π –º–∏–Ω–∏–º—É–º
    const targetMax = 235; // –¶–µ–ª–µ–≤–æ–π –º–∞–∫—Å–∏–º—É–º
    
    const contrast = (targetMax - targetMin) / (max - min);
    const brightness = targetMin - min * contrast;
    
    return {
      brightness: Math.max(-50, Math.min(50, brightness)),
      contrast: Math.max(0.5, Math.min(2.0, contrast))
    };
  }

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∏–∫—Å–µ–ª–µ–π
  clamp(value) {
    return Math.max(0, Math.min(255, Math.round(value)));
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è AI (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
  async resizeForAI(file, targetWidth = 768, targetHeight = 1024) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
          const aspectRatio = img.naturalWidth / img.naturalHeight;
          let newWidth, newHeight;
          
          if (aspectRatio > targetWidth / targetHeight) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            newWidth = targetWidth;
            newHeight = Math.round(targetWidth / aspectRatio);
          } else {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            newHeight = targetHeight;
            newWidth = Math.round(targetHeight * aspectRatio);
          }
          
          this.canvas.width = newWidth;
          this.canvas.height = newHeight;
          
          this.ctx.clearRect(0, 0, newWidth, newHeight);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
          this.ctx.imageSmoothingEnabled = true;
          this.ctx.imageSmoothingQuality = 'high';
          this.ctx.drawImage(img, 0, 0, newWidth, newHeight);
          
          this.canvas.toBlob((blob) => {
            if (blob) {
              const resizedFile = new File(
                [blob],
                file.name.replace(/\.[^/.]+$/, '_ai_ready.jpg'),
                { type: 'image/jpeg' }
              );
              
              console.log(`üìè –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è AI: ${img.naturalWidth}x${img.naturalHeight} ‚Üí ${newWidth}x${newHeight}`);
              resolve(resizedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
            }
          }, 'image/jpeg', 0.95);
          
        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞'));
      };
      
      img.src = url;
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ EXIF –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ AI
  async stripMetadata(file) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const url = URL.createObjectURL(file);
      
      img.onload = () => {
        try {
          this.canvas.width = img.naturalWidth;
          this.canvas.height = img.naturalHeight;
          
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          this.ctx.drawImage(img, 0, 0);
          
          this.canvas.toBlob((blob) => {
            if (blob) {
              const cleanFile = new File(
                [blob],
                file.name.replace(/\.[^/.]+$/, '_clean.jpg'),
                { type: 'image/jpeg' }
              );
              
              console.log('üßπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
              resolve(cleanFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ'));
            }
          }, 'image/jpeg', 0.98);
          
        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };
      
      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏'));
      };
      
      img.src = url;
    });
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è AI
  async preprocessForAI(file, options = {}) {
    const {
      normalizeColors = false,  // –û—Ç–∫–ª—é—á–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ iPhone
      enhanceQuality = false,   // –û—Ç–∫–ª—é—á–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
      optimizeSize = true,      // –í–∫–ª—é—á–µ–Ω–æ: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è AI –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      stripMeta = true,         // –í–∫–ª—é—á–µ–Ω–æ: –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      targetWidth = 768,
      targetHeight = 1024
    } = options;

    console.log('üîß –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è AI (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)...');
    
    try {
      let processedFile = file;
      
      // 1. –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ)
      if (stripMeta) {
        processedFile = await this.stripMetadata(processedFile);
      }
      
      // 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª)
      if (normalizeColors) {
        processedFile = await this.normalizeColorSpace(processedFile);
      }
      
      // 3. –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–û–¢–ö–õ–Æ–ß–ï–ù–û - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª)
      if (enhanceQuality) {
        processedFile = await this.enhanceImage(processedFile);
      }
      
      // 4. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è AI (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)
      if (optimizeSize) {
        processedFile = await this.resizeForAI(processedFile, targetWidth, targetHeight);
      }
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');
      return processedFile;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      throw error;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥–ª—è iPhone –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
  needsAdvancedProcessing(file) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ iPhone –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const isLargeFile = file.size > 3 * 1024 * 1024; // –ë–æ–ª—å—à–µ 3MB
    const isHEVC = /\.(heic|heif)$/i.test(file.name);
    const hasAppleSignature = file.name.includes('IMG_') || file.name.includes('Photo_');
    
    return isLargeFile || isHEVC || hasAppleSignature;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const imagePreprocessor = new ImagePreprocessorService();
export default imagePreprocessor; 