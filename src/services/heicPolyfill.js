// –ü–æ–ª–∏—Ñ–∏–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HEIC –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
class HEICPolyfill {
  constructor() {
    this.isSupported = this.checkHEICSupport();
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É HEIC –±—Ä–∞—É–∑–µ—Ä–æ–º
  checkHEICSupport() {
    const canvas = document.createElement('canvas');
    canvas.width = 1;
    canvas.height = 1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ç–∏–ø—ã MIME
    const supportedTypes = [
      'image/heic',
      'image/heif'
    ];
    
    return supportedTypes.some(type => {
      const img = new Image();
      try {
        // –í Safari –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        return img.src = `data:${type};base64,` && true;
      } catch (e) {
        return false;
      }
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HEIC —Å –ø–æ–º–æ—â—å—é FileReader
  async loadHEICAsImage(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const img = new Image();
        
        img.onload = () => {
          resolve(img);
        };
        
        img.onerror = () => {
          // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å HEIC –Ω–∞—Ç–∏–≤–Ω–æ,
          // –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
          reject(new Error('Browser cannot load HEIC natively'));
        };
        
        img.src = e.target.result;
      };
      
      reader.onerror = () => {
        reject(new Error('Failed to read HEIC file'));
      };
      
      reader.readAsDataURL(file);
    });
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ canvas –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  async convertWithCanvas(file) {
    try {
      const img = await this.loadHEICAsImage(file);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas
      this.canvas.width = img.naturalWidth || img.width;
      this.canvas.height = img.naturalHeight || img.height;
      
      // –û—á–∏—â–∞–µ–º –∏ —Ä–∏—Å—É–µ–º
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.ctx.imageSmoothingEnabled = true;
      this.ctx.imageSmoothingQuality = 'high';
      this.ctx.drawImage(img, 0, 0);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPEG
      return new Promise((resolve, reject) => {
        this.canvas.toBlob((blob) => {
          if (blob) {
            const convertedFile = new File(
              [blob],
              file.name.replace(/\.(heic|heif)$/i, '.jpg'),
              { type: 'image/jpeg' }
            );
            resolve(convertedFile);
          } else {
            reject(new Error('Canvas conversion failed'));
          }
        }, 'image/jpeg', 0.95);
      });
      
    } catch (error) {
      throw new Error(`HEIC conversion failed: ${error.message}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
  canProcess(file) {
    const isHEIC = /\.(heic|heif)$/i.test(file.name) || 
                   ['image/heic', 'image/heif'].includes(file.type);
    return isHEIC;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  async convertHEIC(file) {
    if (!this.canProcess(file)) {
      throw new Error('File is not HEIC format');
    }

    console.log('üîÑ Converting HEIC file:', file.name);
    
    try {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–∞
      if (this.isSupported) {
        console.log('‚úÖ Using native HEIC support');
        return await this.convertWithCanvas(file);
      }
      
      // –ï—Å–ª–∏ –Ω–∞—Ç–∏–≤–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      console.log('‚ö†Ô∏è No native HEIC support, using fallback method');
      return await this.convertWithCanvas(file);
      
    } catch (error) {
      console.error('‚ùå HEIC conversion failed:', error);
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      // –í –Ω–∞–¥–µ–∂–¥–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–º–æ–∂–µ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      console.warn('‚ö†Ô∏è Returning original HEIC file - server will handle conversion');
      return file;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async getImageMetadata(file) {
    try {
      const img = await this.loadHEICAsImage(file);
      
      return {
        width: img.naturalWidth || img.width,
        height: img.naturalHeight || img.height,
        aspectRatio: (img.naturalWidth || img.width) / (img.naturalHeight || img.height),
        hasNativeSupport: this.isSupported
      };
    } catch (error) {
      console.warn('Could not extract HEIC metadata:', error);
      return null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const heicPolyfill = new HEICPolyfill();
export default heicPolyfill; 