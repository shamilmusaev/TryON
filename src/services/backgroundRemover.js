// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–µ–∂–¥—ã
class BackgroundRemoverService {
  constructor() {
    this.apiKey = null; // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è remove.bg
    this.isEnabled = true; // –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ development —Ä–µ–∂–∏–º–µ
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª—è—Ç—å —Ñ–æ–Ω (–¥–ª—è –æ–¥–µ–∂–¥—ã - –¥–∞, –¥–ª—è –ª—é–¥–µ–π - –Ω–µ—Ç)
  shouldRemoveBackground(type) {
    return type === 'outfit' || type === 'clothing';
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
  async removeBackground(file, type = 'outfit') {
    try {
      if (!this.shouldRemoveBackground(type)) {
        console.log('üö´ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —Ç–∏–ø–∞:', type);
        return file;
      }

      console.log('üé≠ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã...');

      // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å remove.bg API
      if (this.apiKey) {
        return await this.removeBackgroundWithAPI(file);
      }

      // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (—É–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É development —Ä–µ–∂–∏–º–∞)
      return await this.simpleBackgroundRemoval(file);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      return file;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ remove.bg API (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
  async removeBackgroundWithAPI(file) {
    const formData = new FormData();
    formData.append('image_file', file);
    formData.append('size', 'auto');

    const response = await fetch('https://api.remove.bg/v1.0/removebg', {
      method: 'POST',
      headers: {
        'X-Api-Key': this.apiKey,
      },
      body: formData,
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }

    const arrayBuffer = await response.arrayBuffer();
    const blob = new Blob([arrayBuffer], { type: 'image/png' });
    
    return new File(
      [blob], 
      file.name.replace(/\.[^/.]+$/, '_no_bg.png'),
      { type: 'image/png' }
    );
  }

  // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (fallback –º–µ—Ç–æ–¥)
  async simpleBackgroundRemoval(file) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const url = URL.createObjectURL(file);

      img.onload = () => {
        try {
          canvas.width = img.naturalWidth;
          canvas.height = img.naturalHeight;

          // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          ctx.drawImage(img, 0, 0);

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
          const data = imageData.data;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç –∏–∑ —É–≥–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const corners = [
            [0, 0], // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π
            [canvas.width - 1, 0], // –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π
            [0, canvas.height - 1], // –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π
            [canvas.width - 1, canvas.height - 1] // –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π
          ];

          let backgroundColors = [];
          
          corners.forEach(([x, y]) => {
            const pixelIndex = (y * canvas.width + x) * 4;
            backgroundColors.push({
              r: data[pixelIndex],
              g: data[pixelIndex + 1],
              b: data[pixelIndex + 2]
            });
          });

          // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
          for (let i = 0; i < data.length; i += 4) {
            const r = data[i];
            const g = data[i + 1];
            const b = data[i + 2];
            
            let isBackground = false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–ª—ã–π/—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
            const brightness = (r + g + b) / 3;
            const isWhitish = brightness > 180 && 
                             Math.abs(r - g) < 40 && 
                             Math.abs(g - b) < 40 && 
                             Math.abs(r - b) < 40;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Å —É–≥–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const isSimilarToCorners = backgroundColors.some(bg => {
              const colorDiff = Math.abs(r - bg.r) + Math.abs(g - bg.g) + Math.abs(b - bg.b);
              return colorDiff < 80; // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–µ –∏–ª–∏ –æ—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –æ–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            const isPlainBackground = brightness > 220 || brightness < 40;

            isBackground = isWhitish || isSimilarToCorners || isPlainBackground;
            
            if (isBackground) {
              data[i + 3] = 0; // –î–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
            }
          }

          // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          ctx.putImageData(imageData, 0, 0);

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
          canvas.toBlob((blob) => {
            if (blob) {
              const processedFile = new File(
                [blob], 
                file.name.replace(/\.[^/.]+$/, '_no_bg.png'),
                { type: 'image/png' }
              );
              
              console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
              resolve(processedFile);
            } else {
              reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
            }
          }, 'image/png', 0.95);

        } catch (error) {
          reject(error);
        } finally {
          URL.revokeObjectURL(url);
        }
      };

      img.onerror = () => {
        URL.revokeObjectURL(url);
        reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'));
      };

      img.crossOrigin = 'anonymous';
      img.src = url;
    });
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ API –∫–ª—é—á–∞ –¥–ª—è remove.bg
  setApiKey(apiKey) {
    this.apiKey = apiKey;
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
  setEnabled(enabled) {
    this.isEnabled = enabled;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
const backgroundRemover = new BackgroundRemoverService();
export default backgroundRemover; 