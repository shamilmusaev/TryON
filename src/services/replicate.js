// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Replicate API —á–µ—Ä–µ–∑ Netlify Functions
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? '/.netlify/functions'  // Netlify Functions –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
  : 'http://localhost:3002/api';  // –õ–æ–∫–∞–ª—å–Ω—ã–π proxy-server –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

class ReplicateService {
  constructor() {
    this.baseURL = API_BASE_URL;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –≤ base64 data URL
  async fileToDataUrl(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsDataURL(file);
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å imgbb, cloudinary –∏–ª–∏ –¥—Ä—É–≥–æ–π)
  async uploadImage(file) {
    try {
      // –î–ª—è –¥–µ–º–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ data URL
      const dataUrl = await this.fileToDataUrl(file);
      return dataUrl;
    } catch (error) {
      console.error('Error uploading image:', error);
      throw new Error('Failed to upload image');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
  async createPrediction(humanImg, garmImg, garmentDescription = 'fashionable clothing') {
    try {
      console.log('üì° Using API endpoint:', `${this.baseURL}/replicate`);
      
      const response = await fetch(`${this.baseURL}/replicate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          human_img: humanImg,
          garm_img: garmImg,
          garment_des: garmentDescription
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }

      const prediction = await response.json();
      return prediction;
    } catch (error) {
      console.error('Error creating prediction:', error);
      
      // –ï—Å–ª–∏ proxy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –æ—à–∏–±–∫—É
      if (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED')) {
        throw new Error('Proxy server not running. Please start the proxy server with: cd server && npm install && npm start');
      }
      
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  async getPrediction(predictionId) {
    try {
      const response = await fetch(`${this.baseURL}/replicate/${predictionId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`Failed to get prediction status: ${response.statusText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Error getting prediction:', error);
      throw error;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ try-on
  async generateTryOn(personImage, clothingImage, garmentDescription = "clothing item") {
    try {
      console.log('üöÄ Starting try-on generation with Replicate...');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 data URLs –µ—Å–ª–∏ –æ–Ω–∏ File –æ–±—ä–µ–∫—Ç—ã
      const personImageData = await this.fileToDataURL(personImage);
      const clothingImageData = await this.fileToDataURL(clothingImage);

      // –°–æ–∑–¥–∞–µ–º prediction
      const response = await fetch(`${this.baseURL}/replicate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          human_img: personImageData,
          garm_img: clothingImageData,
          garment_des: garmentDescription
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }

      const prediction = await response.json();
      console.log('‚úÖ Prediction created:', prediction.id);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º wait –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      return {
        id: prediction.id,
        status: prediction.status,
        wait: (onProgress) => this.waitForCompletion(prediction.id, onProgress)
      };

    } catch (error) {
      console.error('‚ùå Replicate generation failed:', error);
      
      // –ï—Å–ª–∏ proxy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ development, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—É—é –æ—à–∏–±–∫—É
      if (process.env.NODE_ENV === 'development' && 
          (error.message.includes('Failed to fetch') || error.message.includes('ERR_CONNECTION_REFUSED'))) {
        throw new Error('Proxy server not running. Please start: node server/proxy-server.js');
      }
      
      throw error;
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–ª–±—ç–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  async waitForCompletion(predictionId, onProgress) {
    const maxAttempts = 60; // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
    const pollInterval = 5000; // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    let attempts = 0;
    
    const poll = async () => {
      try {
        attempts++;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å prediction
        const statusUrl = process.env.NODE_ENV === 'production' 
          ? `/.netlify/functions/replicate-status?id=${predictionId}`
          : `http://localhost:3002/api/replicate/${predictionId}`;

        const response = await fetch(statusUrl, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          }
        });

        if (!response.ok) {
          throw new Error(`Failed to get prediction status: ${response.statusText}`);
        }

        const prediction = await response.json();
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        let progress = 0;
        let status = 'processing';
        let message = 'Processing your try-on...';

        switch (prediction.status) {
          case 'starting':
            progress = 10;
            status = 'starting';
            message = 'Initializing AI model...';
            break;
          case 'processing':
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            progress = Math.min(20 + (attempts * 10), 90);
            status = 'processing';
            message = 'AI is creating your try-on...';
            break;
          case 'succeeded':
            progress = 100;
            status = 'completed';
            message = 'Try-on completed successfully!';
            if (onProgress) onProgress(progress, status, message);
            return prediction;
          case 'failed':
            throw new Error(prediction.error || 'Generation failed');
          case 'canceled':
            throw new Error('Generation was canceled');
        }

        // –í—ã–∑—ã–≤–∞–µ–º callback —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        if (onProgress) {
          onProgress(progress, status, message);
        }

        // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º polling
        if (prediction.status === 'starting' || prediction.status === 'processing') {
          if (attempts >= maxAttempts) {
            throw new Error('Generation timeout - please try again');
          }
          
          await new Promise(resolve => setTimeout(resolve, pollInterval));
          return poll();
        }

        return prediction;

      } catch (error) {
        console.error('‚ùå Polling error:', error);
        throw error;
      }
    };

    return poll();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ File –≤ Data URL
  async fileToDataURL(imageInput) {
    console.log('üîÑ Converting to data URL:', imageInput);
    
    // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ (URL), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (typeof imageInput === 'string') {
      return imageInput;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å file —Å–≤–æ–π—Å—Ç–≤–æ–º (–∏–∑ UploadPage)
    if (imageInput && typeof imageInput === 'object' && imageInput.file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(imageInput.file);
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ File –æ–±—ä–µ–∫—Ç
    if (imageInput instanceof File) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(imageInput);
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å url —Å–≤–æ–π—Å—Ç–≤–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º url
    if (imageInput && typeof imageInput === 'object' && imageInput.url) {
      return imageInput.url;
    }

    console.error('‚ùå Invalid file format:', imageInput);
    throw new Error(`Invalid file format: received ${typeof imageInput}, expected File object or string URL`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
  async getModelInfo() {
    try {
      const response = await fetch(`${this.baseURL}/replicate/models/info`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`Failed to get model info: ${response.statusText}`);
      }

      return await response.json();

    } catch (error) {
      console.error('‚ùå Failed to get model info:', error);
      return null;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π
  async generateVariations(personImage, clothingImage) {
    const descriptions = [
      'elegant and sophisticated style',
      'casual and comfortable look', 
      'trendy and fashionable outfit',
      'professional business attire'
    ];

    const results = [];
    
    for (let i = 0; i < descriptions.length; i++) {
      try {
        const result = await this.generateTryOn(personImage, clothingImage, descriptions[i]);
        results.push({
          id: result.id,
          description: descriptions[i],
          title: `Style Variation ${i + 1}`,
          promise: result
        });
      } catch (error) {
        console.error(`Failed to generate variation ${i + 1}:`, error);
      }
    }

    return results;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
const replicateService = new ReplicateService();
export default replicateService; 